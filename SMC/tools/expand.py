#!/usr/bin/env python

import os
import shutil
import sys
import getopt
import string
import re

def expand(forg):
    bas, ext = os.path.splitext(forg)
    fopt = bas+'_exp'+ext

    f0 = open(forg,'r')
    f1 = open(fopt,'w')

    f1.write('! DO NOT EDIT THIS FILE!!!\n')
    f1.write('!\n')
    f1.write('! This file was generated by expand.py based on '+forg+'.\n')
    f1.write('!\n')

    contRE = re.compile(r"&\s*\n")

    multiline = []
    for line in f0.readlines():

        if fortran_comment(line):
            f1.write(line)
            continue 

        if contRE.search(line):

            multiline.append(line)

        elif multiline:  # the last line of multiline

            multiline.append(line)

            singleline = merge_lines(multiline)
            newMultiLine = expand_line(singleline)
            if newMultiLine:
                for l in multiline:
                    f1.write(comment_out(l))                
                f1.write(newMultiLine)
            else:
                for l in multiline:
                    f1.write(l)

            multiline = []

        else:

            newline = expand_line(line)
            if newline:
                f1.write(comment_out(line))
                f1.write(newline)
            else:
                f1.write(line)

    f1.close()
    f0.close()


def expand_line(line):
    mmRE = re.compile(r"matmul\s*\(.*\)")
    dmRE = re.compile(r"dot_product\s*\(.*matmul\s*\(.*\).*\)")
    dpRE = re.compile(r"dot_product\s*\(.*\)")
    fdRE = re.compile(r"first_deriv_[468]\s*\(.*\)")
    search_mm = mmRE.search(line)
    search_dm = dmRE.search(line)
    search_dp = dpRE.search(line)
    search_fd = fdRE.search(line)
    if search_mm and not search_dm:
        return expand_matmul(line)
    elif search_dp and not search_dm:
        return expand_dot_product(line)
    elif search_dm:
        return expand_aMu(line)
    elif search_fd:
        return expand_first_deriv(line)
    else:
        return ''

def expand_matmul(line):
    if re.compile(r"matmul\s*\(.*M8.*\)").search(line):
        return expand_matmul_8(line)
    elif re.compile(r"matmul\s*\(.*M6.*\)").search(line):
        return expand_matmul_6(line)
    elif re.compile(r"matmul\s*\(.*M4.*\)").search(line):
        return expand_matmul_4(line)
    else:
        return ''

def expand_aMu(line):
    return ''  # Don't expand this
    m8RE = re.compile(r"matmul\s*\(.*M8.*\)")
    if m8RE.search(line):
        return expand_aMu_8(line)
    else:
        return ''

def expand_first_deriv(line):
    if re.compile(r"first_deriv_8").search(line):
        return expand_first_deriv_8(line)
    if re.compile(r"first_deriv_6").search(line):
        return expand_first_deriv_6(line)
    elif re.compile(r"first_deriv_4").search(line):
        return expand_first_deriv_4(line)
    else:
        return ''

def expand_matmul_8(line):
    # expand (1) lhs = matmul(M8, u( .... )) OR
    #        (2) lhs = matmul(a( .... ), M8)
    lhs, rhs = line.split('=')

    lhs = lhs.strip(' \t')
    i = string.find(line, lhs)
    indent = line[0:i]
    moreindent = indent+'   '
    for i in range(len(lhs)):
        moreindent = moreindent+' '

    rhs = rhs.strip(' \t\n\r')
    args = rhs[7:-1].replace(' ','')  # 7 comes form 'matmul('
    if args[0:2] == 'M8':  
        # M8,u(,,,)
        x = args[3:]
        u = expand_fortran_slice(x)
        return indent+lhs+'(1) = '+'M8(1,1) * '+u[0]+' &\n' + \
               moreindent + ' + ' +'M8(1,2) * '+u[1]+' &\n' + \
               moreindent + ' + ' +'M8(1,3) * '+u[2]+' &\n' + \
               moreindent + ' + ' +'M8(1,4) * '+u[3]+' &\n' + \
               moreindent + ' - ' +'M8(8,4) * '+u[4]+'\n'   + \
               indent+lhs+'(2) = '+'M8(2,1) * '+u[0]+' &\n' + \
               moreindent + ' + ' +'M8(2,2) * '+u[1]+' &\n' + \
               moreindent + ' + ' +'M8(2,3) * '+u[2]+' &\n' + \
               moreindent + ' + ' +'M8(2,4) * '+u[3]+' &\n' + \
               moreindent + ' - ' +'M8(7,4) * '+u[4]+' &\n' + \
               moreindent + ' - ' +'M8(7,3) * '+u[5]+'\n'   + \
               indent+lhs+'(3) = '+'M8(3,1) * '+u[0]+' &\n' + \
               moreindent + ' + ' +'M8(3,2) * '+u[1]+' &\n' + \
               moreindent + ' + ' +'M8(3,3) * '+u[2]+' &\n' + \
               moreindent + ' + ' +'M8(3,4) * '+u[3]+' &\n' + \
               moreindent + ' - ' +'M8(6,4) * '+u[4]+' &\n' + \
               moreindent + ' - ' +'M8(6,3) * '+u[5]+' &\n' + \
               moreindent + ' - ' +'M8(6,2) * '+u[6]+'\n'   + \
               indent+lhs+'(4) = '+'M8(4,1) * '+u[0]+' &\n' + \
               moreindent + ' + ' +'M8(4,2) * '+u[1]+' &\n' + \
               moreindent + ' + ' +'M8(4,3) * '+u[2]+' &\n' + \
               moreindent + ' + ' +'M8(4,4) * '+u[3]+' &\n' + \
               moreindent + ' - ' +'M8(5,4) * '+u[4]+' &\n' + \
               moreindent + ' - ' +'M8(5,3) * '+u[5]+' &\n' + \
               moreindent + ' - ' +'M8(5,2) * '+u[6]+' &\n' + \
               moreindent + ' - ' +'M8(5,1) * '+u[7]+'\n'   + \
               indent+lhs+'(5) = '+'M8(5,1) * '+u[0]+' &\n' + \
               moreindent + ' + ' +'M8(5,2) * '+u[1]+' &\n' + \
               moreindent + ' + ' +'M8(5,3) * '+u[2]+' &\n' + \
               moreindent + ' + ' +'M8(5,4) * '+u[3]+' &\n' + \
               moreindent + ' - ' +'M8(4,4) * '+u[4]+' &\n' + \
               moreindent + ' - ' +'M8(4,3) * '+u[5]+' &\n' + \
               moreindent + ' - ' +'M8(4,2) * '+u[6]+' &\n' + \
               moreindent + ' - ' +'M8(4,1) * '+u[7]+'\n'   + \
               indent+lhs+'(6) = '+'M8(6,2) * '+u[1]+' &\n' + \
               moreindent + ' + ' +'M8(6,3) * '+u[2]+' &\n' + \
               moreindent + ' + ' +'M8(6,4) * '+u[3]+' &\n' + \
               moreindent + ' - ' +'M8(3,4) * '+u[4]+' &\n' + \
               moreindent + ' - ' +'M8(3,3) * '+u[5]+' &\n' + \
               moreindent + ' - ' +'M8(3,2) * '+u[6]+' &\n' + \
               moreindent + ' - ' +'M8(3,1) * '+u[7]+'\n'   + \
               indent+lhs+'(7) = '+'M8(7,3) * '+u[2]+' &\n' + \
               moreindent + ' + ' +'M8(7,4) * '+u[3]+' &\n' + \
               moreindent + ' - ' +'M8(2,4) * '+u[4]+' &\n' + \
               moreindent + ' - ' +'M8(2,3) * '+u[5]+' &\n' + \
               moreindent + ' - ' +'M8(2,2) * '+u[6]+' &\n' + \
               moreindent + ' - ' +'M8(2,1) * '+u[7]+'\n'   + \
               indent+lhs+'(8) = '+'M8(8,4) * '+u[3]+' &\n' + \
               moreindent + ' - ' +'M8(1,4) * '+u[4]+' &\n' + \
               moreindent + ' - ' +'M8(1,3) * '+u[5]+' &\n' + \
               moreindent + ' - ' +'M8(1,2) * '+u[6]+' &\n' + \
               moreindent + ' - ' +'M8(1,1) * '+u[7]+'\n' 
    else: 
        # a(,,,), M8
        x = args[0:-3]
        a = expand_fortran_slice(x)
        return indent+lhs+'(1) = '+a[0]+' * M8(1,1) &\n' + \
               moreindent + ' + ' +a[1]+' * M8(2,1) &\n' + \
               moreindent + ' + ' +a[2]+' * M8(3,1) &\n' + \
               moreindent + ' + ' +a[3]+' * M8(4,1) &\n' + \
               moreindent + ' + ' +a[4]+' * M8(5,1)\n'   + \
               indent+lhs+'(2) = '+a[0]+' * M8(1,2) &\n' + \
               moreindent + ' + ' +a[1]+' * M8(2,2) &\n' + \
               moreindent + ' + ' +a[2]+' * M8(3,2) &\n' + \
               moreindent + ' + ' +a[3]+' * M8(4,2) &\n' + \
               moreindent + ' + ' +a[4]+' * M8(5,2) &\n' + \
               moreindent + ' + ' +a[5]+' * M8(6,2)\n'   + \
               indent+lhs+'(3) = '+a[0]+' * M8(1,3) &\n' + \
               moreindent + ' + ' +a[1]+' * M8(2,3) &\n' + \
               moreindent + ' + ' +a[2]+' * M8(3,3) &\n' + \
               moreindent + ' + ' +a[3]+' * M8(4,3) &\n' + \
               moreindent + ' + ' +a[4]+' * M8(5,3) &\n' + \
               moreindent + ' + ' +a[5]+' * M8(6,3) &\n' + \
               moreindent + ' + ' +a[6]+' * M8(7,3)\n'   + \
               indent+lhs+'(4) = '+a[0]+' * M8(1,4) &\n' + \
               moreindent + ' + ' +a[1]+' * M8(2,4) &\n' + \
               moreindent + ' + ' +a[2]+' * M8(3,4) &\n' + \
               moreindent + ' + ' +a[3]+' * M8(4,4) &\n' + \
               moreindent + ' + ' +a[4]+' * M8(5,4) &\n' + \
               moreindent + ' + ' +a[5]+' * M8(6,4) &\n' + \
               moreindent + ' + ' +a[6]+' * M8(7,4) &\n' + \
               moreindent + ' + ' +a[7]+' * M8(8,4)\n'   + \
               indent+lhs+'(5) =-'+a[0]+' * M8(8,4) &\n' + \
               moreindent + ' - ' +a[1]+' * M8(7,4) &\n' + \
               moreindent + ' - ' +a[2]+' * M8(6,4) &\n' + \
               moreindent + ' - ' +a[3]+' * M8(5,4) &\n' + \
               moreindent + ' - ' +a[4]+' * M8(4,4) &\n' + \
               moreindent + ' - ' +a[5]+' * M8(3,4) &\n' + \
               moreindent + ' - ' +a[6]+' * M8(2,4) &\n' + \
               moreindent + ' - ' +a[7]+' * M8(1,4)\n'   + \
               indent+lhs+'(6) =-'+a[1]+' * M8(7,3) &\n' + \
               moreindent + ' - ' +a[2]+' * M8(6,3) &\n' + \
               moreindent + ' - ' +a[3]+' * M8(5,3) &\n' + \
               moreindent + ' - ' +a[4]+' * M8(4,3) &\n' + \
               moreindent + ' - ' +a[5]+' * M8(3,3) &\n' + \
               moreindent + ' - ' +a[6]+' * M8(2,3) &\n' + \
               moreindent + ' - ' +a[7]+' * M8(1,3)\n' + \
               indent+lhs+'(7) =-'+a[2]+' * M8(6,2) &\n' + \
               moreindent + ' - ' +a[3]+' * M8(5,2) &\n' + \
               moreindent + ' - ' +a[4]+' * M8(4,2) &\n' + \
               moreindent + ' - ' +a[5]+' * M8(3,2) &\n' + \
               moreindent + ' - ' +a[6]+' * M8(2,2) &\n' + \
               moreindent + ' - ' +a[7]+' * M8(1,2)\n' + \
               indent+lhs+'(8) =-'+a[3]+' * M8(5,1) &\n' + \
               moreindent + ' - ' +a[4]+' * M8(4,1) &\n' + \
               moreindent + ' - ' +a[5]+' * M8(3,1) &\n' + \
               moreindent + ' - ' +a[6]+' * M8(2,1) &\n' + \
               moreindent + ' - ' +a[7]+' * M8(1,1)\n' 


def expand_matmul_6(line):
    # expand (1) lhs = matmul(M6, u( .... )) OR
    #        (2) lhs = matmul(a( .... ), M6)
    lhs, rhs = line.split('=')

    lhs = lhs.strip(' \t')
    i = string.find(line, lhs)
    indent = line[0:i]
    moreindent = indent+'   '
    for i in range(len(lhs)):
        moreindent = moreindent+' '

    rhs = rhs.strip(' \t\n\r')
    args = rhs[7:-1].replace(' ','')  # 7 comes form 'matmul('
    if args[0:2] == 'M6':  
        # M6,u(,,,)
        x = args[3:]
        u = expand_fortran_slice(x)
        return indent+lhs+'(1) = '+'M6(1,1) * '+u[0]+' &\n' + \
               moreindent + ' + ' +'M6(1,2) * '+u[1]+' &\n' + \
               moreindent + ' + ' +'M6(1,3) * '+u[2]+' &\n' + \
               moreindent + ' - ' +'M6(6,3) * '+u[3]+'\n'   + \
               indent+lhs+'(2) = '+'M6(2,1) * '+u[0]+' &\n' + \
               moreindent + ' + ' +'M6(2,2) * '+u[1]+' &\n' + \
               moreindent + ' + ' +'M6(2,3) * '+u[2]+' &\n' + \
               moreindent + ' - ' +'M6(5,3) * '+u[3]+' &\n' + \
               moreindent + ' - ' +'M6(5,2) * '+u[4]+'\n' + \
               indent+lhs+'(3) = '+'M6(3,1) * '+u[0]+' &\n' + \
               moreindent + ' + ' +'M6(3,2) * '+u[1]+' &\n' + \
               moreindent + ' + ' +'M6(3,3) * '+u[2]+' &\n' + \
               moreindent + ' - ' +'M6(4,3) * '+u[3]+' &\n' + \
               moreindent + ' - ' +'M6(4,2) * '+u[4]+' &\n' + \
               moreindent + ' - ' +'M6(4,1) * '+u[5]+'\n' + \
               indent+lhs+'(4) = '+'M6(4,1) * '+u[0]+' &\n' + \
               moreindent + ' + ' +'M6(4,2) * '+u[1]+' &\n' + \
               moreindent + ' + ' +'M6(4,3) * '+u[2]+' &\n' + \
               moreindent + ' - ' +'M6(3,3) * '+u[3]+' &\n' + \
               moreindent + ' - ' +'M6(3,2) * '+u[4]+' &\n' + \
               moreindent + ' - ' +'M6(3,1) * '+u[5]+'\n' + \
               indent+lhs+'(5) = '+'M6(5,2) * '+u[1]+' &\n' + \
               moreindent + ' + ' +'M6(5,3) * '+u[2]+' &\n' + \
               moreindent + ' - ' +'M6(2,3) * '+u[3]+' &\n' + \
               moreindent + ' - ' +'M6(2,2) * '+u[4]+' &\n' + \
               moreindent + ' - ' +'M6(2,1) * '+u[5]+'\n' + \
               indent+lhs+'(6) = '+'M6(6,3) * '+u[2]+' &\n' + \
               moreindent + ' - ' +'M6(1,3) * '+u[3]+' &\n' + \
               moreindent + ' - ' +'M6(1,2) * '+u[4]+' &\n' + \
               moreindent + ' - ' +'M6(1,1) * '+u[5]+'\n'
    else: 
        # a(,,,), M6
        x = args[0:-3]
        a = expand_fortran_slice(x)
        return indent+lhs+'(1) = '+a[0]+' * M6(1,1) &\n' + \
               moreindent + ' + ' +a[1]+' * M6(2,1) &\n' + \
               moreindent + ' + ' +a[2]+' * M6(3,1) &\n' + \
               moreindent + ' + ' +a[3]+' * M6(4,1)\n' + \
               indent+lhs+'(2) = '+a[0]+' * M6(1,2) &\n' + \
               moreindent + ' + ' +a[1]+' * M6(2,2) &\n' + \
               moreindent + ' + ' +a[2]+' * M6(3,2) &\n' + \
               moreindent + ' + ' +a[3]+' * M6(4,2) &\n' + \
               moreindent + ' + ' +a[4]+' * M6(5,2)\n' + \
               indent+lhs+'(3) = '+a[0]+' * M6(1,3) &\n' + \
               moreindent + ' + ' +a[1]+' * M6(2,3) &\n' + \
               moreindent + ' + ' +a[2]+' * M6(3,3) &\n' + \
               moreindent + ' + ' +a[3]+' * M6(4,3) &\n' + \
               moreindent + ' + ' +a[4]+' * M6(5,3) &\n' + \
               moreindent + ' + ' +a[5]+' * M6(6,3)\n' + \
               indent+lhs+'(4) =-'+a[0]+' * M6(6,3) &\n' + \
               moreindent + ' - ' +a[1]+' * M6(5,3) &\n' + \
               moreindent + ' - ' +a[2]+' * M6(4,3) &\n' + \
               moreindent + ' - ' +a[3]+' * M6(3,3) &\n' + \
               moreindent + ' - ' +a[4]+' * M6(2,3) &\n' + \
               moreindent + ' - ' +a[5]+' * M6(1,3)\n' + \
               indent+lhs+'(5) =-'+a[1]+' * M6(5,2) &\n' + \
               moreindent + ' - ' +a[2]+' * M6(4,2) &\n' + \
               moreindent + ' - ' +a[3]+' * M6(3,2) &\n' + \
               moreindent + ' - ' +a[4]+' * M6(2,2) &\n' + \
               moreindent + ' - ' +a[5]+' * M6(1,2)\n' + \
               indent+lhs+'(6) =-'+a[2]+' * M6(4,1) &\n' + \
               moreindent + ' - ' +a[3]+' * M6(3,1) &\n' + \
               moreindent + ' - ' +a[4]+' * M6(2,1) &\n' + \
               moreindent + ' - ' +a[5]+' * M6(1,1)\n'


def expand_matmul_4(line):
    # expand (1) lhs = matmul(M4, u( .... )) OR
    #        (2) lhs = matmul(a( .... ), M4)
    lhs, rhs = line.split('=')

    lhs = lhs.strip(' \t')
    i = string.find(line, lhs)
    indent = line[0:i]
    moreindent = indent+'   '
    for i in range(len(lhs)):
        moreindent = moreindent+' '

    rhs = rhs.strip(' \t\n\r')
    args = rhs[7:-1].replace(' ','')  # 7 comes form 'matmul('
    if args[0:2] == 'M4':  
        # M4,u(,,,)
        x = args[3:]
        u = expand_fortran_slice(x)
        return indent+lhs+'(1) = '+'M4(1,1) * '+u[0]+' &\n' + \
               moreindent + ' + ' +'M4(1,2) * '+u[1]+' &\n' + \
               moreindent + ' - ' +'M4(4,2) * '+u[2]+'\n'   + \
               indent+lhs+'(2) = '+'M4(2,1) * '+u[0]+' &\n' + \
               moreindent + ' + ' +'M4(2,2) * '+u[1]+' &\n' + \
               moreindent + ' - ' +'M4(3,2) * '+u[2]+' &\n' + \
               moreindent + ' - ' +'M4(3,1) * '+u[3]+'\n' + \
               indent+lhs+'(3) = '+'M4(3,1) * '+u[0]+' &\n' + \
               moreindent + ' + ' +'M4(3,2) * '+u[1]+' &\n' + \
               moreindent + ' - ' +'M4(2,2) * '+u[2]+' &\n' + \
               moreindent + ' - ' +'M4(2,1) * '+u[3]+'\n' + \
               indent+lhs+'(4) = '+'M4(4,2) * '+u[1]+' &\n' + \
               moreindent + ' - ' +'M4(1,2) * '+u[2]+' &\n' + \
               moreindent + ' - ' +'M4(1,1) * '+u[3]+'\n'
    else: 
        # a(,,,), M4
        x = args[0:-3]
        a = expand_fortran_slice(x)
        return indent+lhs+'(1) = '+a[0]+' * M4(1,1) &\n' + \
               moreindent + ' + ' +a[1]+' * M4(2,1) &\n' + \
               moreindent + ' + ' +a[2]+' * M4(3,1)\n' + \
               indent+lhs+'(2) = '+a[0]+' * M4(1,2) &\n' + \
               moreindent + ' + ' +a[1]+' * M4(2,2) &\n' + \
               moreindent + ' + ' +a[2]+' * M4(3,2) &\n' + \
               moreindent + ' + ' +a[3]+' * M4(4,2)\n' + \
               indent+lhs+'(3) =-'+a[0]+' * M4(4,2) &\n' + \
               moreindent + ' - ' +a[1]+' * M4(3,2) &\n' + \
               moreindent + ' - ' +a[2]+' * M4(2,2) &\n' + \
               moreindent + ' - ' +a[3]+' * M4(1,2)\n' + \
               indent+lhs+'(4) =-'+a[1]+' * M4(3,1) &\n' + \
               moreindent + ' - ' +a[2]+' * M4(2,1) &\n' + \
               moreindent + ' - ' +a[3]+' * M4(1,1)\n'


def expand_dot_product(line):
    lhs, rhs = line.split('=')

    lhs = lhs.strip(' \t')
    i = string.find(line, lhs)
    indent = line[0:i]
    moreindent = indent+'   '

    rhs = rhs.strip(' \t\n\r').replace(' ','')

    def dp_args(dpargs):
        if dpargs.count(',') == 1:
            return [''], ''
        elif dpargs.count('(') == 1:
            icomma = string.find(dpargs,',')
            ilp = string.find(dpargs,'(')
            if ilp < icomma:
                irp = string.find(dpargs,')')
                am = dpargs[0:irp+1]
                a1 = dpargs[irp+2:]
            else:
                a1 = dpargs[0:icomma]
                am = dpargs[icomma+1:]
            u = expand_fortran_slice(am)
            a = []
            for i in range(len(u)):
                a.append(a1+'('+str(i+1)+')')
            return u, a
        else:
            isep = string.find(dpargs,'),')
            a1 = dpargs[0:isep+1]
            a2 = dpargs[isep+2:]
            ea1 = expand_fortran_slice(a1)
            ea2 = expand_fortran_slice(a2)
            lea = min(len(ea1), len(ea2))
            return ea1[0:lea], ea2[0:lea]
    
    ndp = rhs.count('dot_product')
    if ndp == 1:
        # [c+]dot_product(a,b)
        i = string.find(rhs,'dot_product')
        line0 = indent+lhs+' = '+rhs[0:i]+' &\n'
        args = rhs[i+len('dot_product('):-1]
        u, a = dp_args(args)
        lu = len(u)
        if lu == 8:
            return line0 + \
                moreindent + '( '+u[0]+'*'+a[0]+' + '+u[1]+'*'+a[1]+' &\n'+\
                moreindent + '+ '+u[2]+'*'+a[2]+' + '+u[3]+'*'+a[3]+' &\n'+\
                moreindent + '+ '+u[4]+'*'+a[4]+' + '+u[5]+'*'+a[5]+' &\n'+\
                moreindent + '+ '+u[6]+'*'+a[6]+' + '+u[7]+'*'+a[7]+' )\n'
        elif lu == 6:
            return line0 + \
                moreindent + '( '+u[0]+'*'+a[0]+' + '+u[1]+'*'+a[1]+' &\n'+\
                moreindent + '+ '+u[2]+'*'+a[2]+' + '+u[3]+'*'+a[3]+' &\n'+\
                moreindent + '+ '+u[4]+'*'+a[4]+' + '+u[5]+'*'+a[5]+' )\n'
        elif lu == 4:
            return line0 + \
                moreindent + '( '+u[0]+'*'+a[0]+' + '+u[1]+'*'+a[1]+' &\n'+\
                moreindent + '+ '+u[2]+'*'+a[2]+' + '+u[3]+'*'+a[3]+' )\n'
        elif lu == 2:
            return line0 + \
                moreindent + '( '+u[0]+'*'+a[0]+' + '+u[1]+'*'+a[1]+' )\n'
        else:
            print "expand_dot_product: Strange!"
            print line
            return ''
    else:
        # dot_product()+dot_product()
        # c + d*dxinv(?)*(dot_product()+dot_product())
        idot = string.find(rhs,'dot_product')
        line0 = indent+lhs+' = '+rhs[0:idot]
        if line0[-1] == '(':
            line0 = line0[0:-1]
            twodots = rhs[idot:-1]
        else:
            twodots = rhs[idot:]
        line0 = line0+' &\n'
        words = twodots.split('dot_product')
        args1 = words[1][1:-2]
        op = words[1][-1]
        args2 = words[2][1:-1]
        u1, a1 = dp_args(args1)
        u2, a2 = dp_args(args2)
        lu1 = len(u1)
        lu2 = len(u2)
        if lu1 == 8 and lu2 == 8:
            return line0 + \
                moreindent+'( ( '+u1[0]+'*'+a1[0]+' + '+u1[1]+'*'+a1[1]+' &\n'+\
                moreindent+'  + '+u1[2]+'*'+a1[2]+' + '+u1[3]+'*'+a1[3]+' &\n'+\
                moreindent+'  + '+u1[4]+'*'+a1[4]+' + '+u1[5]+'*'+a1[5]+' &\n'+\
                moreindent+'  + '+u1[6]+'*'+a1[6]+' + '+u1[7]+'*'+a1[7]+' ) &\n'+\
                moreindent+'+ ( '+u2[0]+'*'+a2[0]+' + '+u2[1]+'*'+a2[1]+' &\n'+\
                moreindent+'  + '+u2[2]+'*'+a2[2]+' + '+u2[3]+'*'+a2[3]+' &\n'+\
                moreindent+'  + '+u2[4]+'*'+a2[4]+' + '+u2[5]+'*'+a2[5]+' &\n'+\
                moreindent+'  + '+u2[6]+'*'+a2[6]+' + '+u2[7]+'*'+a2[7]+' ) )\n'
        elif lu1 == 6 and lu2 == 6:
            return line0 + \
                moreindent+'( ( '+u1[0]+'*'+a1[0]+' + '+u1[1]+'*'+a1[1]+' &\n'+\
                moreindent+'  + '+u1[2]+'*'+a1[2]+' + '+u1[3]+'*'+a1[3]+' &\n'+\
                moreindent+'  + '+u1[4]+'*'+a1[4]+' + '+u1[5]+'*'+a1[5]+' ) &\n'+\
                moreindent+'+ ( '+u2[0]+'*'+a2[0]+' + '+u2[1]+'*'+a2[1]+' &\n'+\
                moreindent+'  + '+u2[2]+'*'+a2[2]+' + '+u2[3]+'*'+a2[3]+' &\n'+\
                moreindent+'  + '+u2[4]+'*'+a2[4]+' + '+u2[5]+'*'+a2[5]+' ) )\n'
        elif lu1 == 4 and lu2 == 4:
            return line0 + \
                moreindent+'( ( '+u1[0]+'*'+a1[0]+' + '+u1[1]+'*'+a1[1]+' &\n'+\
                moreindent+'  + '+u1[2]+'*'+a1[2]+' + '+u1[3]+'*'+a1[3]+' ) &\n'+\
                moreindent+'+ ( '+u2[0]+'*'+a2[0]+' + '+u2[1]+'*'+a2[1]+' &\n'+\
                moreindent+'  + '+u2[2]+'*'+a2[2]+' + '+u2[3]+'*'+a2[3]+' ) )\n'
        elif lu1 == 2 and lu2 == 2:
            return line0 + \
                moreindent+'( ( '+u1[0]+'*'+a1[0]+' + '+u1[1]+'*'+a1[1]+' ) &\n'+\
                moreindent+'+ ( '+u2[0]+'*'+a2[0]+' + '+u2[1]+'*'+a2[1]+' ) )\n'
        else:
            print "expand_dot_product: Strange!"
            print line
            return ''
    return ''

def expand_aMu_8(line):
    # expand lhs = dot_product(matmul(a,M8),u) [+ dot_product()]
    lhs, rhs = line.split('=')

    lhs = lhs.strip(' \t')
    i = string.find(line, lhs)
    indent = line[0:i]
    moreindent = indent+'   '

    rhs = rhs.strip(' \t\n\r').replace(' ','')
    rhs = rhs[19:] # strip dot_product(matmul(
    i = string.find(rhs,')+dot_product')
    if i > 0:
        aMu = rhs[0:i]
        dp2 = rhs[i+2:]
        line0 = indent+lhs+' = '+dp2+' + &\n'
    else:
        aMu = rhs[:-1]
        line0 = indent+lhs+' = &\n'

    a, u = aMu.split(',M8),')
    aL = expand_fortran_slice(a)
    uL = expand_fortran_slice(u)

    return line0 + \
           moreindent + '( M8(1,1)*('+aL[0]+'*'+uL[0]+'-'+aL[7]+'*'+uL[7]+') &\n' +\
           moreindent + '+ M8(2,1)*('+aL[1]+'*'+uL[0]+'-'+aL[6]+'*'+uL[7]+') &\n' +\
           moreindent + '+ M8(3,1)*('+aL[2]+'*'+uL[0]+'-'+aL[5]+'*'+uL[7]+') &\n' +\
           moreindent + '+ M8(4,1)*('+aL[3]+'*'+uL[0]+'-'+aL[4]+'*'+uL[7]+') &\n' +\
           moreindent + '+ M8(5,1)*('+aL[4]+'*'+uL[0]+'-'+aL[3]+'*'+uL[7]+') &\n' +\
           \
           moreindent + '+ M8(1,2)*('+aL[0]+'*'+uL[1]+'-'+aL[7]+'*'+uL[6]+') &\n' +\
           moreindent + '+ M8(2,2)*('+aL[1]+'*'+uL[1]+'-'+aL[6]+'*'+uL[6]+') &\n' +\
           moreindent + '+ M8(3,2)*('+aL[2]+'*'+uL[1]+'-'+aL[5]+'*'+uL[6]+') &\n' +\
           moreindent + '+ M8(4,2)*('+aL[3]+'*'+uL[1]+'-'+aL[4]+'*'+uL[6]+') &\n' +\
           moreindent + '+ M8(5,2)*('+aL[4]+'*'+uL[1]+'-'+aL[3]+'*'+uL[6]+') &\n' +\
           moreindent + '+ M8(6,2)*('+aL[5]+'*'+uL[1]+'-'+aL[2]+'*'+uL[6]+') &\n' +\
           \
           moreindent + '+ M8(1,3)*('+aL[0]+'*'+uL[2]+'-'+aL[7]+'*'+uL[5]+') &\n' +\
           moreindent + '+ M8(2,3)*('+aL[1]+'*'+uL[2]+'-'+aL[6]+'*'+uL[5]+') &\n' +\
           moreindent + '+ M8(3,3)*('+aL[2]+'*'+uL[2]+'-'+aL[5]+'*'+uL[5]+') &\n' +\
           moreindent + '+ M8(4,3)*('+aL[3]+'*'+uL[2]+'-'+aL[4]+'*'+uL[5]+') &\n' +\
           moreindent + '+ M8(5,3)*('+aL[4]+'*'+uL[2]+'-'+aL[3]+'*'+uL[5]+') &\n' +\
           moreindent + '+ M8(6,3)*('+aL[5]+'*'+uL[2]+'-'+aL[2]+'*'+uL[5]+') &\n' +\
           moreindent + '+ M8(7,3)*('+aL[6]+'*'+uL[2]+'-'+aL[1]+'*'+uL[5]+') &\n' +\
           \
           moreindent + '+ M8(1,4)*('+aL[0]+'*'+uL[3]+'-'+aL[7]+'*'+uL[4]+') &\n' +\
           moreindent + '+ M8(2,4)*('+aL[1]+'*'+uL[3]+'-'+aL[6]+'*'+uL[4]+') &\n' +\
           moreindent + '+ M8(3,4)*('+aL[2]+'*'+uL[3]+'-'+aL[5]+'*'+uL[4]+') &\n' +\
           moreindent + '+ M8(4,4)*('+aL[3]+'*'+uL[3]+'-'+aL[4]+'*'+uL[4]+') &\n' +\
           moreindent + '+ M8(5,4)*('+aL[4]+'*'+uL[3]+'-'+aL[3]+'*'+uL[4]+') &\n' +\
           moreindent + '+ M8(6,4)*('+aL[5]+'*'+uL[3]+'-'+aL[2]+'*'+uL[4]+') &\n' +\
           moreindent + '+ M8(7,4)*('+aL[6]+'*'+uL[3]+'-'+aL[1]+'*'+uL[4]+') &\n' +\
           moreindent + '+ M8(8,4)*('+aL[7]+'*'+uL[3]+'-'+aL[0]+'*'+uL[4]+') )\n' 


def expand_first_deriv_8(line):
    # expand lhs = [term 1 + ] dxinv(?)*first_deriv_8
    lhs, rhs = line.split('=')

    lhs = lhs.strip(' \t')
    i = string.find(line, lhs)
    indent = line[0:i]
    moreindent = indent+'   '

    rhs = rhs.strip(' \t\n\r').replace(' ','')
    i = string.find(rhs, 'dxinv')
    if i==0:
        line0 = indent+lhs+' = '+rhs[0:len('dxinv(1)')]+' * &\n'
    else:
        line0 = indent+lhs+' = '+rhs[0:i-1]+' '+rhs[i-1]+' '+rhs[i:i+len('dxinv(1)')]+' * &\n'
    idir = int(rhs[i+len('dxinv(')])
    u = rhs[i+len('dxinv(1)')+1+len('first_deriv_8('):-1]

    uL = expand_fortran_slice2(u,idir)
    if not uL:
        print 'Unknown syntax:' 
        print line
        sys.exit(1)
        return''

    return line0 + \
        moreindent + '( D8(1)*('+uL[5]+'-'+uL[3]+') &\n' +\
        moreindent + '+ D8(2)*('+uL[6]+'-'+uL[2]+') &\n' +\
        moreindent + '+ D8(3)*('+uL[7]+'-'+uL[1]+') &\n' +\
        moreindent + '+ D8(4)*('+uL[8]+'-'+uL[0]+') )\n'

def expand_first_deriv_6(line):
    # expand lhs = [term 1 + ] dxinv(?)*first_deriv_6
    lhs, rhs = line.split('=')

    lhs = lhs.strip(' \t')
    i = string.find(line, lhs)
    indent = line[0:i]
    moreindent = indent+'   '

    rhs = rhs.strip(' \t\n\r').replace(' ','')
    i = string.find(rhs, 'dxinv')
    if i==0:
        line0 = indent+lhs+' = '+rhs[0:len('dxinv(1)')]+' * &\n'
    else:
        line0 = indent+lhs+' = '+rhs[0:i-1]+' '+rhs[i-1]+' '+rhs[i:i+len('dxinv(1)')]+' * &\n'
    idir = int(rhs[i+len('dxinv(')])
    u = rhs[i+len('dxinv(1)')+1+len('first_deriv_6('):-1]

    uL = expand_fortran_slice2(u,idir)
    if not uL:
        print 'Unknown syntax:' 
        print line
        sys.exit(1)
        return''

    return line0 + \
        moreindent + '( D6(1)*('+uL[4]+'-'+uL[2]+') &\n' +\
        moreindent + '+ D6(2)*('+uL[5]+'-'+uL[1]+') &\n' +\
        moreindent + '+ D6(3)*('+uL[6]+'-'+uL[0]+') )\n'

def expand_first_deriv_4(line):
    # expand lhs = [term 1 + ] dxinv(?)*first_deriv_4
    lhs, rhs = line.split('=')

    lhs = lhs.strip(' \t')
    i = string.find(line, lhs)
    indent = line[0:i]
    moreindent = indent+'   '

    rhs = rhs.strip(' \t\n\r').replace(' ','')
    i = string.find(rhs, 'dxinv')
    if i==0:
        line0 = indent+lhs+' = '+rhs[0:len('dxinv(1)')]+' * &\n'
    else:
        line0 = indent+lhs+' = '+rhs[0:i-1]+' '+rhs[i-1]+' '+rhs[i:i+len('dxinv(1)')]+' * &\n'
    idir = int(rhs[i+len('dxinv(')])
    u = rhs[i+len('dxinv(1)')+1+len('first_deriv_4('):-1]

    uL = expand_fortran_slice2(u,idir)
    if not uL:
        print 'Unknown syntax:' 
        print line
        sys.exit(1)
        return''

    return line0 + \
        moreindent + '( D4(1)*('+uL[3]+'-'+uL[1]+') &\n' +\
        moreindent + '+ D4(2)*('+uL[4]+'-'+uL[0]+') )\n'


def expand_fortran_slice(x):
    def ii(an_index):
        index0, index1 = an_index.split(':')
        try:
            iistart = int(index0[1:])
        except:
            iistart = 0
        try:
            iiend = int(index1[1:])
        except:
            iiend = 0
        return iistart, iiend
    xs = []
    lb = string.find(x, '(')
    rb = string.find(x, ')')
    v = x[0:lb]
    indices = x[lb+1:rb].split(',')
    if indices[0] == ':':
        i_index = indices[1]
        j_index = indices[2]
        k_index = indices[3]
        return [v+'('+str(n+1)+','+i_index+','+j_index+','+k_index+')' for n in range(8)]
    else:
        i_index = indices[0]
        j_index = indices[1]
        k_index = indices[2]
        if string.find(i_index,':') >= 0:
            istart, iend = ii(i_index)
            for i in range(istart,iend+1):
                xs.append(v+'(i+'+str(i)+',j,k,NCOMP)')
        elif string.find(j_index,':') >= 0:
            jstart, jend = ii(j_index)
            for j in range(jstart,jend+1):
                xs.append(v+'(i,j+'+str(j)+',k,NCOMP)')
        else:
            kstart, kend = ii(k_index)
            for k in range(kstart,kend+1):
                xs.append(v+'(i,j,k+'+str(k)+',NCOMP)')
        if len(indices) == 4:
            return [t.replace('NCOMP',indices[3]).replace('+-','-').replace('+0','  ') for t in xs]
        else:
            return [t.replace(',NCOMP','').replace('+-','-').replace('+0','  ') for t in xs]


def expand_fortran_slice2(x,idir):
    # cons(i-4:i+4,j,k,iu)
    match1 = re.compile(r"(?P<v>[a-zA-Z]\w*)\((?P<i>i[i\+\-:0-9]*,j[j\+\-:0-9]*,k[k\+\-:0-9]*)(?P<e>(,[a-zA-Z]\w*))*\)$").match(x)
    
    # cons(i-4:i+4,j,k,imx)*un+q(i-4:i+4,j,k,qpres)
    match2 = re.compile(r"(?P<v1>[a-zA-Z]\w*)\((?P<i1>i[i\+\-:0-9]*,j[j\+\-:0-9]*,k[k\+\-:0-9]*)(?P<e1>(,[a-zA-Z]\w*))*\)" +
                        "\*un(\(-[23]:[23]\))*\+"+
                        "(?P<v2>[a-zA-Z]\w*)\((?P<i2>i[i\+\-:0-9]*,j[j\+\-:0-9]*,k[k\+\-:0-9]*)(?P<e2>(,[a-zA-Z]\w*))*\)$").match(x)

    # cons(i-4:i+4,j,k,imy)*un
    match3 = re.compile(r"(?P<v1>[a-zA-Z]\w*)\((?P<i1>i[i\+\-:0-9]*,j[j\+\-:0-9]*,k[k\+\-:0-9]*)(?P<e1>(,[a-zA-Z]\w*))*\)" +
                        "\*un(\(-[23]:[23]\))*$").match(x)

    # (cons(i-4:i+4,j,k,iene)+q(i-4:i+4,j,k,qpres))*un
    match4 = re.compile(r"\((?P<v1>[a-zA-Z]\w*)\((?P<i1>i[i\+\-:0-9]*,j[j\+\-:0-9]*,k[k\+\-:0-9]*)(?P<e1>(,[a-zA-Z]\w*))*\)" +
                        "\+(?P<v2>[a-zA-Z]\w*)\((?P<i2>i[i\+\-:0-9]*,j[j\+\-:0-9]*,k[k\+\-:0-9]*)(?P<e2>(,[a-zA-Z]\w*))*\)\)" +
                        "\*un(\(-[23]:[23]\))*$").match(x) 

    # vsm(i-4:i+4,j,k)*(vy(i-4:i+4,j,k)+wz(i-4:i+4,j,k))
    match5 = re.compile(r"(?P<v0>[a-zA-Z]\w*)\((?P<i0>i[i\+\-:0-9]*,j[j\+\-:0-9]*,k[k\+\-:0-9]*)(?P<e0>(,[a-zA-Z]\w*))*\)" +
                        "\*\((?P<v1>[a-zA-Z]\w*)\((?P<i1>i[i\+\-:0-9]*,j[j\+\-:0-9]*,k[k\+\-:0-9]*)(?P<e1>(,[a-zA-Z]\w*))*\)" +
                        "\+(?P<v2>[a-zA-Z]\w*)\((?P<i2>i[i\+\-:0-9]*,j[j\+\-:0-9]*,k[k\+\-:0-9]*)(?P<e2>(,[a-zA-Z]\w*))*\)\)$").match(x)

    # mu(i-4:i+4,j,k)*uy(i-4:i+4,j,k)
    match6 = re.compile(r"(?P<v1>[a-zA-Z]\w*)\((?P<i1>i[i\+\-:0-9]*,j[j\+\-:0-9]*,k[k\+\-:0-9]*)(?P<e1>(,[a-zA-Z]\w*))*\)" +
                        "\*(?P<v2>[a-zA-Z]\w*)\((?P<i2>i[i\+\-:0-9]*,j[j\+\-:0-9]*,k[k\+\-:0-9]*)(?P<e2>(,[a-zA-Z]\w*))*\)$").match(x)

    # tmpx(i-4:i+4,comp)
    match7 = re.compile(r"(?P<v>[a-zA-Z]\w*)\((?P<i>i[i\+\-:0-9]*)(?P<e>(,[a-zA-Z]\w*))*\)$").match(x)

    # tmpy(i,j-4:j+4,k,iu)
    match8 = re.compile(r"(?P<v>[a-zA-Z]\w*)\((?P<i>i[i\+\-:0-9]*,j[j\+\-:0-9]*)(?P<e>(,[a-zA-Z]\w*))*\)$").match(x)

    if match1:
        v =  match1.group('v')
        ijk = match1.group('i')
        ncomp = match1.group('e')
        if ncomp is None:
            ncomp = ''
        if idir == 1:
            xs = []
            istart = int(ijk[1:3])
            for i in range(istart,-istart+1):
                xs.append(v+'(i+'+str(i)+',j,k,NCOMP)')
        elif idir == 2:
            xs = []
            jstart = int(ijk[3:5])
            for j in range(jstart,-jstart+1):
                xs.append(v+'(i,j+'+str(j)+',k,NCOMP)')
        elif idir == 3:
            xs = []
            kstart = int(ijk[5:7])
            for k in range(kstart,-kstart+1):
                xs.append(v+'(i,j,k+'+str(k)+',NCOMP)')
        return [t.replace(',NCOMP',ncomp).replace('+-','-').replace('+0','  ') for t in xs]

    elif match2:
        v1 = match2.group('v1')
        v2 = match2.group('v2')
        n1 = match2.group('e1')
        n2 = match2.group('e2')
        if n1 is None:
            n1 = ''
        if n2 is None:
            n2 = ''
        ijk = match2.group('i1')
        if idir == 1:
            xs = []
            istart = int(ijk[1:3])
            for i in range(istart,-istart+1):
                xs.append('('+v1+'(i+'+str(i)+',j,k,NCOMP1)*un('+str(i)+')+'+
                          v2+'(i+'+str(i)+',j,k,NCOMP2))')
        elif idir == 2:
            xs = []
            jstart = int(ijk[3:5])
            for j in range(jstart,-jstart+1):
                xs.append('('+v1+'(i,j+'+str(j)+',k,NCOMP1)*un('+str(j)+')+'+
                          v2+'(i,j+'+str(j)+',k,NCOMP2))')
        elif idir == 3:
            xs = []
            kstart = int(ijk[5:7])
            for k in range(kstart,-kstart+1):
                xs.append('('+v1+'(i,j,k+'+str(k)+',NCOMP1)*un('+str(k)+')+'+
                          v2+'(i,j,k+'+str(k)+',NCOMP2))')            
        return [t.replace(',NCOMP1',n1).replace(',NCOMP2',n2).replace('+-','-').replace('+0','  ') for t in xs]

    elif match3:
        v1 = match3.group('v1')
        n1 = match3.group('e1')
        if n1 is None:
            n1 = ''
        ijk = match3.group('i1')
        if idir == 1:
            xs = []
            istart = int(ijk[1:3])
            for i in range(istart,-istart+1):
                xs.append(v1+'(i+'+str(i)+',j,k,NCOMP1)*un('+str(i)+')')
        elif idir == 2:
            xs = []
            jstart = int(ijk[3:5])
            for j in range(jstart,-jstart+1):
                xs.append(v1+'(i,j+'+str(j)+',k,NCOMP1)*un('+str(j)+')')
        elif idir == 3:
            xs = []
            kstart = int(ijk[5:7])
            for k in range(kstart,-kstart+1):
                xs.append(v1+'(i,j,k+'+str(k)+',NCOMP1)*un('+str(k)+')')
        return [t.replace(',NCOMP1',n1).replace('+-','-').replace('+0','  ') for t in xs]

    elif match4:
        v1 = match4.group('v1')
        v2 = match4.group('v2')
        n1 = match4.group('e1')
        n2 = match4.group('e2')
        if n1 is None:
            n1 = ''
        if n2 is None:
            n2 = ''
        ijk = match4.group('i1')
        if idir == 1:
            xs = []
            istart = int(ijk[1:3])
            for i in range(istart,-istart+1):
                xs.append('('+v1+'(i+'+str(i)+',j,k,NCOMP1)+'+
                          v2+'(i+'+str(i)+',j,k,NCOMP2))*un('+str(i)+')')
        elif idir == 2:
            xs = []
            jstart = int(ijk[3:5])
            for j in range(jstart,-jstart+1):
                xs.append('('+v1+'(i,j+'+str(j)+',k,NCOMP1)+'+
                          v2+'(i,j+'+str(j)+',k,NCOMP2))*un('+str(j)+')')
        elif idir == 3:
            xs = []
            kstart = int(ijk[5:7])
            for k in range(kstart,-kstart+1):
                xs.append('('+v1+'(i,j,k+'+str(k)+',NCOMP1)+'+
                          v2+'(i,j,k+'+str(k)+',NCOMP2))*un('+str(k)+')')            
        return [t.replace(',NCOMP1',n1).replace(',NCOMP2',n2).replace('+-','-').replace('+0','  ') for t in xs]

    elif match5:
        v0 = match5.group('v0')
        v1 = match5.group('v1')
        v2 = match5.group('v2')
        n0 = match5.group('e0')
        n1 = match5.group('e1')
        n2 = match5.group('e2')
        ijk = match5.group('i1')
        if n0 is None:
            n0 = ''
        if n1 is None:
            n1 = ''
        if n2 is None:
            n2 = ''
        if idir == 1:
            xs = []
            istart = int(ijk[1:3])
            for i in range(istart,-istart+1):
                xs.append(v0+'(i+'+str(i)+',j,k,NCOMP0)*'+
                          '('+v1+'(i+'+str(i)+',j,k,NCOMP1)+'+
                          v2+'(i+'+str(i)+',j,k,NCOMP2))')
        elif idir == 2:
            xs = []
            jstart = int(ijk[3:5])
            for j in range(jstart,-jstart+1):
                xs.append(v0+'(i,j+'+str(j)+',k,NCOMP0)*'+
                          '('+v1+'(i,j+'+str(j)+',k,NCOMP1)+'+
                          v2+'(i,j+'+str(j)+',k,NCOMP2))')
        elif idir == 3:
            xs = []
            kstart = int(ijk[5:7])
            for k in range(kstart,-kstart+1):
                xs.append(v0+'(i,j,k+'+str(k)+',NCOMP0)*'+
                          '('+v1+'(i,j,k+'+str(k)+',NCOMP1)+'+
                          v2+'(i,j,k+'+str(k)+',NCOMP2))')
        return [t.replace(',NCOMP0',n0).replace(',NCOMP1',n1).replace(',NCOMP2',n2).replace('+-','-').replace('+0','  ') for t in xs]

    elif match6:
        v1 = match6.group('v1')
        v2 = match6.group('v2')
        n1 = match6.group('e1')
        n2 = match6.group('e2')
        ijk = match6.group('i1')
        if n1 is None:
            n1 = ''
        if n2 is None:
            n2 = ''
        if idir == 1:
            xs = []
            istart = int(ijk[1:3])
            for i in range(istart,-istart+1):
                xs.append(v1+'(i+'+str(i)+',j,k,NCOMP1)*'+
                          v2+'(i+'+str(i)+',j,k,NCOMP2)')
        elif idir == 2:
            xs = []
            jstart = int(ijk[3:5])
            for j in range(jstart,-jstart+1):
                xs.append(v1+'(i,j+'+str(j)+',k,NCOMP1)*'+
                          v2+'(i,j+'+str(j)+',k,NCOMP2)')
        elif idir == 3:
            xs = []
            kstart = int(ijk[5:7])
            for k in range(kstart,-kstart+1):
                xs.append(v1+'(i,j,k+'+str(k)+',NCOMP1)*'+
                          v2+'(i,j,k+'+str(k)+',NCOMP2)')
        return [t.replace(',NCOMP1',n1).replace(',NCOMP2',n2).replace('+-','-').replace('+0','  ') for t in xs]

    elif match7:
        v =  match7.group('v')
        ijk = match7.group('i')
        ncomp = match7.group('e')
        if ncomp is None:
            ncomp = ''
        if idir == 1:
            xs = []
            istart = int(ijk[1:3])
            for i in range(istart,-istart+1):
                xs.append(v+'(i+'+str(i)+',NCOMP)')
        else:
            return ''
        return [t.replace(',NCOMP',ncomp).replace('+-','-').replace('+0','  ') for t in xs]
            
    elif match8:
        v =  match8.group('v')
        ijk = match8.group('i')
        ncomp = match8.group('e')
        if ncomp is None:
            ncomp = ''
        if idir == 1:
            xs = []
            istart = int(ijk[1:3])
            for i in range(istart,-istart+1):
                xs.append(v+'(i+'+str(i)+',j,NCOMP)')
        elif idir == 2:
            xs = []
            jstart = int(ijk[3:5])
            for j in range(jstart,-jstart+1):
                xs.append(v+'(i,j+'+str(j)+',NCOMP)')
        else:
            return ''
        return [t.replace(',NCOMP',ncomp).replace('+-','-').replace('+0','  ') for t in xs]
            
    else:
        return ''


def merge_lines(multiline):
    lns = []
    lns.append(multiline[0].rstrip(' \t\n\r&'))
    for l in multiline[1:]:
        lns.append(l.strip(' \t\n\r&'))
    return ' '.join(lns)+'\n'

def comment_out(line):
    return '!EXPAND'+line

def fortran_comment(line):
    commRE = re.compile(r"\s*!")
    if commRE.match(line):
        return True
    else:
        return False

if __name__== "__main__":
    if len(sys.argv) == 1:
        print "usage: expand.py kernels.f90"
        sys.exit(1)
    expand(sys.argv[1])
