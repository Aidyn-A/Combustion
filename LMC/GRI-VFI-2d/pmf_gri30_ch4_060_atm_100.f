C     generated by Joe Grcar in December 2006
C     directory: chemkin/run/pmf_gri30_ch4_060_atm_100
C     mechanism: GRI-Mech 3.0
C     fuel: methane, CH4
C     stoichiometry: phi = 0.60
C     pressure: 10 atmospheres
C     extent of domain: -0.5 cm to 0.5 cm
C     location of flame: 0.0 cm
C     differencing: centered and conservative
C     mesh spacing: 5 microns uniform
c-------------------------------------------------
c                                                 
c                                                 
c                              -USAGE-            
c                                                 
c     OVERVIEW: call pmf_GRI   (xlo,xhi,y,Niny)   
c     computes y(xlo,xhi) by averaging data over  
c     the range [xlo,xhi]. Here x is a scalar, y  
c     a vector, with Niny components used. Piece- 
c     constant Extrapolation is applied to points 
c     laying outside the range of the orig data   
c                                                 
c     domain: x in [ 0.00000E+00, 0.00000E+00]  
c     number of states in vector y:    56         
c     number of x data points:     1              
c                                                 
c     CALLING PROGRAM NEEDS: none                 
c     PROCEDURE NEEDS:  none                      
c     COMPILER NEEDS: f77, long names (14 char)   
c     SYSTEM NEEDS: none                          
c     NOTES: This routine was generated by        
c     subroutine makeRoutine.                     
c                                                 
c-------------------------------------------------
c                                                 
c                          -SPECIFICATION-        
c     SYNTAX:                                     
c     subroutine pmf_GRI   (xlo,xhi:dp,y:dp arr, Niny: int)
c     returns: none                               
c     REQUIRES: none                              
c     MODIFIES: y, N                              
c     SIGNALS: none                               
c     EFFECTS: computes the average value of y    
c     over the range [xlo,xhi] and returns number 
c     of components used, N.                      
c                                                 
c-------------------------------------------------
c                                                 
c                         -IMPLEMENTATION-        
c     AUTHOR: auto-generated by makeAveInterp     
c     MODIFICATION HISTORY: none                  
c     NOTES: interpolation x,y data is defined in 
c     data statements for efficiency.             
c     REQUIRES: none                              
c     LOCAL VARIABLES:                            
c     xlo,xhi.........(dp) average y on this range
c     y_vector........(1D dp arr) computed y(x)   
c     Niny............(int) no. of used components
c     x_data..........(dp) x data points          
c     y_data..........(dp) y(x) data points       
c     N...............(int) number of x points    
c     M...............(int) dimension of y_data   
c     i,j,k...........(int) loop index            
c     lo_{lo,hi}side..(int) idx of data near xlo  
c     hi_{lo,hi}side..(int) idx of data near xhi  
c     x1..............(dp) interpolation point    
c     x2..............(dp) interpolation point    
c     y1..............(dp) interpolation value    
c     y2..............(dp) interpolation value    
c     dydx............(dp) slope of linear interp 
c     ylo.............(dp) value at xlo           
c     yhi.............(dp) value at xhi           
c     GLOBAL VARIABLES:none                       
c     PROCEDURES: none                            
c     FILES: none                                 
c     I/O: none                                   
c-------------------------------------------------
c                                                 
c                             -CODE-              
c     FIRST LINE:                                 
      subroutine pmf_GRI   (xlo,xhi,y_vector,Niny)
c                                                 
c     declare local variables                     
c                                                 
      integer N,M,i,j,k,lo_loside,lo_hiside       
      integer hi_loside,hi_hiside,Niny            
      double precision xlo,xhi,y_vector(*),sum    
      double precision ylo,yhi,x1,y1,x2,y2,dydx   
      double precision x_data(     1)              
      double precision y_data(     1,    56)        
      data N,M /     1,    56/                   
      Niny =     56                                
c                                                 
c     interpolation x,y data                      
c                                                 
      data x_data(     1     ) /   0.000000000000E+00/
      data y_data(     1,   1) /   0.578000000000E+03/
      data y_data(     1,   2) /   0.162579670415E+02/
      data y_data(     1,   3) /   0.592275611592E-02/
      data y_data(     1,   4) /   0.528556258006E-17/
      data y_data(     1,   5) /   0.148966077607E-28/
      data y_data(     1,   6) /   0.000000000000E+00/
      data y_data(     1,   7) /   0.197554092192E+00/
      data y_data(     1,   8) /   0.239744417650E-22/
      data y_data(     1,   9) /   0.326380281964E-19/
      data y_data(     1,  10) /   0.228703207233E-16/
      data y_data(     1,  11) /   0.384155422107E-21/
      data y_data(     1,  12) /   0.400190958490E-58/
      data y_data(     1,  13) /   0.112048142680E-51/
      data y_data(     1,  14) /   0.000000000000E+00/
      data y_data(     1,  15) /   0.000000000000E+00/
      data y_data(     1,  16) /   0.251353357769E-16/
      data y_data(     1,  17) /   0.592662276579E-01/
      data y_data(     1,  18) /   0.000000000000E+00/
      data y_data(     1,  19) /   0.374839304277E-24/
      data y_data(     1,  20) /   0.000000000000E+00/
      data y_data(     1,  21) /   0.182818269628E-19/
      data y_data(     1,  22) /   0.156000895474E-40/
      data y_data(     1,  23) /   0.274656972544E-24/
      data y_data(     1,  24) /   0.146641582506E-24/
      data y_data(     1,  25) /   0.000000000000E+00/
      data y_data(     1,  26) /   0.000000000000E+00/
      data y_data(     1,  27) /   0.771142857691E-44/
      data y_data(     1,  28) /   0.126469897232E-22/
      data y_data(     1,  29) /   0.000000000000E+00/
      data y_data(     1,  30) /   0.000000000000E+00/
      data y_data(     1,  31) /   0.000000000000E+00/
      data y_data(     1,  32) /   0.000000000000E+00/
      data y_data(     1,  33) /   0.000000000000E+00/
      data y_data(     1,  34) /   0.587229944638E-40/
      data y_data(     1,  35) /   0.259621799744E-45/
      data y_data(     1,  36) /   0.267501542071E-34/
      data y_data(     1,  37) /   0.000000000000E+00/
      data y_data(     1,  38) /   0.411909067563E-35/
      data y_data(     1,  39) /   0.124890374794E-27/
      data y_data(     1,  40) /   0.165928384490E-27/
      data y_data(     1,  41) /   0.249488178148E-28/
      data y_data(     1,  42) /   0.208990459943E-44/
      data y_data(     1,  43) /   0.148369193690E-28/
      data y_data(     1,  44) /   0.000000000000E+00/
      data y_data(     1,  45) /   0.155538733131E-47/
      data y_data(     1,  46) /   0.450291382468E-52/
      data y_data(     1,  47) /   0.000000000000E+00/
      data y_data(     1,  48) /   0.000000000000E+00/
      data y_data(     1,  49) /   0.000000000000E+00/
      data y_data(     1,  50) /   0.169475675859E-24/
      data y_data(     1,  51) /   0.743179680150E+00/
      data y_data(     1,  52) /   0.000000000000E+00/
      data y_data(     1,  53) /   0.152762980799E-32/
      data y_data(     1,  54) /   0.000000000000E+00/
      data y_data(     1,  55) /   0.000000000000E+00/
      data y_data(     1,  56) /   0.000000000000E+00/
c                                                 
c     interpolation routine                       
c                                                 
      lo_loside = 0
      lo_hiside = 0
      hi_loside = 0
      hi_hiside = 0
      if (xlo .le. x_data(1)) then
         lo_loside = 1
         lo_hiside = 1
      end if
      if (xhi .le. x_data(1)) then
         hi_loside = 1
         hi_hiside = 1
      end if
      if (xlo .ge. x_data(N)) then
         lo_loside = N
         lo_hiside = N
      end if
      if (xhi .ge. x_data(N)) then
         hi_loside = N
         hi_hiside = N
      end if
      if (lo_loside.eq.0) then
         do i = 1, N-1                           
            if ( (xlo .ge. x_data(i))
     &           .and.
     &           (xlo .le. x_data(i+1)) ) then
               lo_loside  = i
               lo_hiside  = i+1
            end if
         end do
      end if
      if (hi_loside.eq.0) then            
         do i = 1, N-1                           
            if ( (xhi .ge. x_data(i))
     &           .and.
     &           (xhi .le. x_data(i+1)) ) then
               hi_loside = i
               hi_hiside = i + 1
            end if
         end do
      end if
         
      do j = 1, M
         
         x1 = x_data(lo_loside)
         y1 = y_data(lo_loside,j)
         
         x2 = x_data(lo_hiside)
         y2 = y_data(lo_hiside,j)
          
         if (lo_loside.eq.lo_hiside) then
            dydx = 0.d0
         else
            dydx = (y2-y1)/(x2-x1)
         end if
         
         ylo = y1 + dydx*(xlo - x1)
         
         if (lo_loside .eq. hi_loside) then
            
            yhi = y1 + dydx*(xhi - x1)
            
            y_vector(j) = 0.5d0*(ylo + yhi)
            
         else
            
            sum = (x2 - xlo) * 0.5d0 * (ylo + y2)
            
            x1 = x_data(hi_loside)
            y1 = y_data(hi_loside,j)
         
            x2 = x_data(hi_hiside)
            y2 = y_data(hi_hiside,j)
            
            if (hi_loside.eq.hi_hiside) then
               dydx = 0.d0
            else
               dydx = (y2-y1)/(x2-x1)
            end if
            
            yhi = y1 + dydx*(xhi - x1)
            
            sum = sum + (xhi - x1)*0.5d0*(yhi+y1)
            
            do k = lo_hiside,hi_loside-1
               
               sum = sum + (x_data(k+1)-x_data(k))
     &              * 0.5d0
     &              * (y_data(k,j) + y_data(k+1,j))
               
            end do
            
            y_vector(j) = sum / (xhi - xlo)
            
         end if
      end do
      end                                         
c     LAST LINE                                   
c-------------------------------------------------
